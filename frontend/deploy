#!/bin/bash -e

cd $(dirname $0)

notify() {
    local url=../slack-webhook-url
    local text="$1"
    if [ -f $url ]; then
        curl -s -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"$text\"}" $(cat $url)
    fi
}

git fetch
git reset --hard origin/${1:-master}

REF=$(git rev-parse --abbrev-ref HEAD)
REV=$(git rev-parse --short HEAD)

trap "notify \"FAILED TO DEPLOY $REV ($REF)\"" ERR

rm -rf build.old
if [ -d build ]; then
    mv build build.old
fi

yarn
yarn build --dest build
yarn i18n build
gzip -k -9 $(find build -type f | egrep '\.(html|js|css|ico)$')

NEWDIST=dist.$(date +%Y%m%d-%H%M%S)

echo "Making $NEWDIST with new assets"
mkdir $NEWDIST
if [ -d build.old ]; then
    cp -a build.old/. $NEWDIST
fi
rsync -a --exclude='*.html' --exclude='*.html.gz' build/. $NEWDIST
echo $(git rev-parse --short HEAD)-nohtml > $NEWDIST/.rev

echo "Switching dist to $NEWDIST"
if [ -L dist ]; then
    old=$(readlink dist)
fi
ln -sfT $NEWDIST dist

if [ -d "$old" ]; then
    echo "Removing $old"
    rm -rf $old
fi

if [ "$2" != "skip" ]; then
    echo "Waiting for new assets to sync"
    sleep 60
fi

echo "Copying new HTMLs to $NEWDIST"
rsync -a build/. $NEWDIST
git rev-parse --short HEAD > $NEWDIST/.rev
if [ "$2" != "skip" ]; then
    echo "Waiting another minute for the new HTMLs to sync"
    sleep 60
fi
echo Done

notify "Deployed $REV ($REF)"
